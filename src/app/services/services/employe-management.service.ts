/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiEmployeManagementGet$Json } from '../fn/employe-management/api-employe-management-get-json';
import { ApiEmployeManagementGet$Json$Params } from '../fn/employe-management/api-employe-management-get-json';
import { apiEmployeManagementGet$Plain } from '../fn/employe-management/api-employe-management-get-plain';
import { ApiEmployeManagementGet$Plain$Params } from '../fn/employe-management/api-employe-management-get-plain';
import { apiEmployeManagementIdDelete } from '../fn/employe-management/api-employe-management-id-delete';
import { ApiEmployeManagementIdDelete$Params } from '../fn/employe-management/api-employe-management-id-delete';
import { apiEmployeManagementIdGet$Json } from '../fn/employe-management/api-employe-management-id-get-json';
import { ApiEmployeManagementIdGet$Json$Params } from '../fn/employe-management/api-employe-management-id-get-json';
import { apiEmployeManagementIdGet$Plain } from '../fn/employe-management/api-employe-management-id-get-plain';
import { ApiEmployeManagementIdGet$Plain$Params } from '../fn/employe-management/api-employe-management-id-get-plain';
import { apiEmployeManagementIdPut } from '../fn/employe-management/api-employe-management-id-put';
import { ApiEmployeManagementIdPut$Params } from '../fn/employe-management/api-employe-management-id-put';
import { EmployeDto } from '../models/employe-dto';

@Injectable({ providedIn: 'root' })
export class EmployeManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiEmployeManagementGet()` */
  static readonly ApiEmployeManagementGetPath = '/api/EmployeManagement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeManagementGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementGet$Plain$Response(params?: ApiEmployeManagementGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EmployeDto>>> {
    return apiEmployeManagementGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeManagementGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementGet$Plain(params?: ApiEmployeManagementGet$Plain$Params, context?: HttpContext): Observable<Array<EmployeDto>> {
    return this.apiEmployeManagementGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EmployeDto>>): Array<EmployeDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeManagementGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementGet$Json$Response(params?: ApiEmployeManagementGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EmployeDto>>> {
    return apiEmployeManagementGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeManagementGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementGet$Json(params?: ApiEmployeManagementGet$Json$Params, context?: HttpContext): Observable<Array<EmployeDto>> {
    return this.apiEmployeManagementGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EmployeDto>>): Array<EmployeDto> => r.body)
    );
  }

  /** Path part for operation `apiEmployeManagementIdGet()` */
  static readonly ApiEmployeManagementIdGetPath = '/api/EmployeManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeManagementIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementIdGet$Plain$Response(params: ApiEmployeManagementIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EmployeDto>> {
    return apiEmployeManagementIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeManagementIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementIdGet$Plain(params: ApiEmployeManagementIdGet$Plain$Params, context?: HttpContext): Observable<EmployeDto> {
    return this.apiEmployeManagementIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmployeDto>): EmployeDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeManagementIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementIdGet$Json$Response(params: ApiEmployeManagementIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<EmployeDto>> {
    return apiEmployeManagementIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeManagementIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementIdGet$Json(params: ApiEmployeManagementIdGet$Json$Params, context?: HttpContext): Observable<EmployeDto> {
    return this.apiEmployeManagementIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmployeDto>): EmployeDto => r.body)
    );
  }

  /** Path part for operation `apiEmployeManagementIdPut()` */
  static readonly ApiEmployeManagementIdPutPath = '/api/EmployeManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeManagementIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmployeManagementIdPut$Response(params: ApiEmployeManagementIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeManagementIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeManagementIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmployeManagementIdPut(params: ApiEmployeManagementIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeManagementIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmployeManagementIdDelete()` */
  static readonly ApiEmployeManagementIdDeletePath = '/api/EmployeManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmployeManagementIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementIdDelete$Response(params: ApiEmployeManagementIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmployeManagementIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmployeManagementIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmployeManagementIdDelete(params: ApiEmployeManagementIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiEmployeManagementIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
