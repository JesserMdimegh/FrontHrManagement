/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUserManagementGet$Json } from '../fn/user-management/api-user-management-get-json';
import { ApiUserManagementGet$Json$Params } from '../fn/user-management/api-user-management-get-json';
import { apiUserManagementGet$Plain } from '../fn/user-management/api-user-management-get-plain';
import { ApiUserManagementGet$Plain$Params } from '../fn/user-management/api-user-management-get-plain';
import { apiUserManagementIdDelete } from '../fn/user-management/api-user-management-id-delete';
import { ApiUserManagementIdDelete$Params } from '../fn/user-management/api-user-management-id-delete';
import { apiUserManagementIdGet$Json } from '../fn/user-management/api-user-management-id-get-json';
import { ApiUserManagementIdGet$Json$Params } from '../fn/user-management/api-user-management-id-get-json';
import { apiUserManagementIdGet$Plain } from '../fn/user-management/api-user-management-id-get-plain';
import { ApiUserManagementIdGet$Plain$Params } from '../fn/user-management/api-user-management-id-get-plain';
import { apiUserManagementIdPut } from '../fn/user-management/api-user-management-id-put';
import { ApiUserManagementIdPut$Params } from '../fn/user-management/api-user-management-id-put';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UserManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUserManagementGet()` */
  static readonly ApiUserManagementGetPath = '/api/UserManagement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementGet$Plain$Response(params?: ApiUserManagementGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return apiUserManagementGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementGet$Plain(params?: ApiUserManagementGet$Plain$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.apiUserManagementGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementGet$Json$Response(params?: ApiUserManagementGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return apiUserManagementGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementGet$Json(params?: ApiUserManagementGet$Json$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.apiUserManagementGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `apiUserManagementIdGet()` */
  static readonly ApiUserManagementIdGetPath = '/api/UserManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdGet$Plain$Response(params: ApiUserManagementIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return apiUserManagementIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdGet$Plain(params: ApiUserManagementIdGet$Plain$Params, context?: HttpContext): Observable<UserDto> {
    return this.apiUserManagementIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdGet$Json$Response(params: ApiUserManagementIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return apiUserManagementIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdGet$Json(params: ApiUserManagementIdGet$Json$Params, context?: HttpContext): Observable<UserDto> {
    return this.apiUserManagementIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `apiUserManagementIdPut()` */
  static readonly ApiUserManagementIdPutPath = '/api/UserManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserManagementIdPut$Response(params: ApiUserManagementIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserManagementIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserManagementIdPut(params: ApiUserManagementIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiUserManagementIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiUserManagementIdDelete()` */
  static readonly ApiUserManagementIdDeletePath = '/api/UserManagement/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserManagementIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdDelete$Response(params: ApiUserManagementIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUserManagementIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserManagementIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserManagementIdDelete(params: ApiUserManagementIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiUserManagementIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
